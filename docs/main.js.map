{
  "version": 3,
  "sources": ["../docs/static.js", "../docs/food.js", "../docs/grid.js", "../docs/snake.js", "../docs/game.js", "../docs/main.js"],
  "sourcesContent": ["class Static {\n  static setP5(p2) {\n    Static._p5 = p2;\n  }\n  static getP5() {\n    return Static._p5;\n  }\n}\nexport const p = Static.getP5;\nexport default Static;\n", "import Game from \"./game.js\";\nimport Static from \"./static.js\";\nlet p;\nclass Food {\n  constructor(x, y) {\n    p = Static.getP5();\n    this.position = p.createVector(x, y);\n    this.size = Game.CELL_SIZE;\n  }\n  update() {\n  }\n  show() {\n    p.fill(\"red\");\n    p.rect(this.position.x, this.position.y, this.size, this.size);\n  }\n}\nexport default Food;\n", "import Game from \"./game.js\";\nimport Static from \"./static.js\";\nlet p;\nclass Grid {\n  constructor() {\n    p = Static.getP5();\n    this.rows = Game.HEIGHT / Game.CELL_SIZE;\n    this.columns = Game.WIDTH / Game.CELL_SIZE;\n    p.print(`Grid: ${this.rows}x${this.columns}`);\n  }\n  getRandomPosition() {\n    const row = p.floor(p.random(1, this.rows));\n    const column = p.floor(p.random(1, this.columns));\n    const x = row * Game.CELL_SIZE;\n    const y = column * Game.CELL_SIZE;\n    return p.createVector(x, y);\n  }\n  show() {\n    p.fill(\"white\");\n    p.rect(0, 0, Game.WIDTH, Game.HEIGHT);\n    for (let i = 1; i < this.columns; i++) {\n      const lineX = Game.CELL_SIZE * i;\n      const lineY1 = 0;\n      const lineY2 = Game.HEIGHT;\n      p.line(lineX, lineY1, lineX, lineY2);\n    }\n    for (let i = 1; i < this.rows; i++) {\n      const lineY = Game.CELL_SIZE * i;\n      const lineX1 = 0;\n      const lineX2 = Game.WIDTH;\n      p.line(lineX1, lineY, lineX2, lineY);\n    }\n  }\n}\nexport default Grid;\n", "import Game from \"./game.js\";\nimport Static from \"./static.js\";\nlet p;\nclass Snake {\n  constructor(x, y, size) {\n    this.maxFramesToMove = 2;\n    p = Static.getP5();\n    this.framesToMove = 5;\n    this.speed = Game.CELL_SIZE;\n    this.velocity = p.createVector(this.speed, 0);\n    this.size = size;\n    this.body = [];\n    for (let i = 0; i < this.size; i++) {\n      const _x = x + i * Game.CELL_SIZE;\n      const position = p.createVector(_x, y);\n      this.body.push(position);\n    }\n  }\n  update() {\n    this.checkInput();\n    this.updatePosition();\n    this.checkBoundaries();\n  }\n  getHead() {\n    return this.body[0];\n  }\n  checkInput() {\n    let newVelocity = this.velocity.copy();\n    if (p.keyCode == p.UP_ARROW) {\n      newVelocity = p.createVector(0, -this.speed);\n    }\n    if (p.keyCode == p.DOWN_ARROW) {\n      newVelocity = p.createVector(0, this.speed);\n    }\n    if (p.keyCode == p.LEFT_ARROW) {\n      newVelocity = p.createVector(-this.speed, 0);\n    }\n    if (p.keyCode == p.RIGHT_ARROW) {\n      newVelocity = p.createVector(this.speed, 0);\n    }\n    const isOpposite = -newVelocity.x == this.velocity.x || -newVelocity.y == this.velocity.y;\n    if (isOpposite) {\n      return;\n    }\n    this.velocity = newVelocity;\n  }\n  updatePosition() {\n    if (p.frameCount % this.framesToMove == 0) {\n      const newHead = this.getHead().copy().add(this.velocity);\n      const hasGrown = this.body.length != this.size;\n      if (!hasGrown) {\n        this.body.pop();\n      }\n      this.body.unshift(newHead);\n    }\n  }\n  checkBoundaries() {\n    const head = this.getHead();\n    if (head.x == Game.WIDTH) {\n      head.x = 0;\n      return;\n    }\n    if (head.y == Game.HEIGHT) {\n      head.y = 0;\n      return;\n    }\n    if (head.x < 0) {\n      head.x = Game.WIDTH - Game.CELL_SIZE;\n      return;\n    }\n    if (head.y < 0) {\n      head.y = Game.HEIGHT - Game.CELL_SIZE;\n      return;\n    }\n  }\n  grow() {\n    this.size++;\n    if (this.framesToMove > this.maxFramesToMove) {\n      this.framesToMove--;\n    }\n  }\n  show() {\n    p.fill(\"green\");\n    for (let i = 0; i < this.body.length; i++) {\n      const {x, y} = this.body[i];\n      p.rect(x, y, Game.CELL_SIZE, Game.CELL_SIZE);\n    }\n  }\n}\nexport default Snake;\n", "import Food from \"./food.js\";\nimport Grid from \"./grid.js\";\nimport Snake from \"./snake.js\";\nimport Static from \"./static.js\";\nlet p;\nclass Game {\n  constructor() {\n    this._logX = 15;\n    p = Static.getP5();\n    this.score = 0;\n    this.playTimeInMs = 0;\n    this.grid = new Grid();\n    this.spawnSnake();\n    this.spawnFood();\n    this.pDebug = p.select(\"#debug\");\n    this.pScore = p.select(\"#score\");\n    this.pTime = p.select(\"#time\");\n    this.isPaused = false;\n  }\n  spawnSnake() {\n    const {x, y} = this.grid.getRandomPosition();\n    const initialSize = 3;\n    this.snake = new Snake(x, y, initialSize);\n  }\n  spawnFood() {\n    const {x: snakeX, y: snakeY} = this.snake.getHead();\n    let foodX;\n    let foodY;\n    let snakeAndFoodCollide;\n    let loopCount = 1;\n    do {\n      ({x: foodX, y: foodY} = this.grid.getRandomPosition());\n      snakeAndFoodCollide = foodX == snakeX && foodY == snakeY;\n      loopCount++;\n      if (loopCount > 100) {\n        throw new Error(\"The food is in the way! Too much recursion.\");\n      }\n    } while (snakeAndFoodCollide);\n    this.food = new Food(foodX, foodY);\n  }\n  snakeIsEating() {\n    const {x: snakeX, y: snakeY} = this.snake.getHead();\n    const {x: foodX, y: foodY} = this.food.position;\n    const d = p.dist(snakeX, snakeY, foodX, foodY);\n    return d == 0;\n  }\n  update() {\n    this.snake.update();\n    if (this.snakeIsEating()) {\n      this.score++;\n      this.snake.grow();\n      this.spawnFood();\n    }\n  }\n  show() {\n    this._logY = this._logX;\n    p.background(220);\n    this.grid.show();\n    this.snake.show();\n    this.food.show();\n    this.showTime();\n    this.showScore();\n  }\n  showScore() {\n    this.pScore.html(`Score: ${this.score}`);\n  }\n  showDebug() {\n    const {x: snakeX, y: snakeY} = this.snake.getHead();\n    this.pDebug.html(`Position: ${snakeX},${snakeY}`);\n  }\n  showTime() {\n    this.playTimeInMs += p.deltaTime;\n    const time = new Date(0, 0, 0, 0, 0, 0, 0);\n    time.setMilliseconds(this.playTimeInMs);\n    const pad = (n) => {\n      return String(n).padStart(2, \"0\");\n    };\n    const hours = pad(time.getHours());\n    const minutes = pad(time.getMinutes());\n    const seconds = pad(time.getSeconds());\n    const timeString = `${hours}:${minutes}:${seconds}`;\n    this.pTime.html(`Time: ${timeString}`);\n  }\n  print(msg) {\n    p.fill(\"black\");\n    p.text(msg, this._logX, this._logY);\n    this._logY += this._logY;\n  }\n}\nGame.WIDTH = 500;\nGame.HEIGHT = 500;\nGame.CELL_SIZE = 25;\nexport default Game;\n", "import Game from \"./game.js\";\nimport Static from \"./static.js\";\nlet game;\nlet btnPause;\nlet _p;\nconst sketch = (p) => {\n  p.setup = () => {\n    _p = p;\n    Static.setP5(p);\n    p.createCanvas(Game.WIDTH, Game.HEIGHT);\n    p.background(220);\n    game = new Game();\n    btnPause = p.select(\"#pause\");\n    btnPause.mouseClicked(togglePause);\n  };\n  p.draw = () => {\n    game.update();\n    game.show();\n  };\n};\nfunction togglePause() {\n  if (game.isPaused) {\n    btnPause.html(\"Resume\");\n    game.isPaused = false;\n    _p.loop();\n    return;\n  }\n  btnPause.html(\"Pause\");\n  game.isPaused = true;\n  _p.noLoop();\n}\nnew p5(sketch, document.querySelector(\"#game\"));\nconsole.log(\"main\");\n"],
  "mappings": "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",
  "names": []
}
